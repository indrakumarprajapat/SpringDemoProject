{"version":3,"sources":["serviceWorker.js","Controller/servicesProvider.js","Component/header.js","Views/dashBoard.js","Views/app.js","index.js","routes.js"],"names":["Boolean","window","location","hostname","match","ServiceProvider","method","methodName","dataInfo","a","axios","headers","then","response","catch","error","servicesCallController","Header","className","href","React","Component","serviceInfo","DashBoard","props","toggleModal","state","setState","editTable","cell","row","UncontrolledDropdown","group","DropdownToggle","caret","color","DropdownMenu","DropdownItem","onClick","e","editQuestion","editAnswer","divider","deleteQuest","customerQuestDetailState","question","answer","id","updatedQuestion","updatedAnswer","defaultModal","submit","handleChangeQuestion","bind","handleChangeAnswer","handleSubmit","serviceCall","getAllRecords","status","responseData","JSON","stringify","data","this","sessionStorage","setItem","console","log","modal","responseResult","showError","preventDefault","questionUpdated","target","value","details","endPointServicesCall","text","answerUpdated","FormData","get","type","keyField","columns","dataField","sort","formatter","editable","baseProps","bootstrap4","bordered","Modal","isOpen","questionModal","toggle","placeholder","name","onChange","Button","submitQuestion","answerModel","submitAnswer","deleteModel","submitDelete","insertModal","onSubmit","App","routes","component","RoutesNavigation","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5888d413.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nexport default class ServiceProvider {\r\n\r\n    async serviceCall(method, methodName, dataInfo) {\r\n        \r\n        const servicesCallController = await axios[`${method}`](`http://13.126.223.130/v1/api/${methodName}`, dataInfo, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n\r\n                return (response);\r\n\r\n        })\r\n        .catch((error) => {\r\n\r\n                return (error)\r\n\r\n        })\r\n        return servicesCallController\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"/dashBoard\">Demo Admin Panel</a>\r\n                </nav>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ServiceProvider from '../Controller/servicesProvider';\r\nimport '../Css/dashBoard.css'\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport \"../Css/dashBoard.css\";\r\nimport {\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    Modal,\r\n    Button\r\n} from 'reactstrap';\r\nimport Header from '../Component/header';\r\n\r\n//services provider\r\nconst serviceInfo = new ServiceProvider();\r\n\r\nclass DashBoard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            customerQuestDetailState: [],\r\n            question: null,\r\n            answer: null,\r\n            id: null,\r\n            updatedQuestion: null,\r\n            updatedAnswer: null,\r\n            defaultModal: false,\r\n            submit: \"Submit\"\r\n        }\r\n        this.handleChangeQuestion = this.handleChangeQuestion.bind(this);\r\n        this.handleChangeAnswer = this.handleChangeAnswer.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n\r\n    //init method to fetch all the records from table\r\n    async componentDidMount() {\r\n\r\n         //get all records\r\n         const getAllRecords = await serviceInfo.serviceCall(\"get\", `question`, null);\r\n\r\n         if (getAllRecords.status === 200 || getAllRecords.status === 201 || getAllRecords.status === 202) {\r\n\r\n             const responseData = JSON.stringify(getAllRecords.data);\r\n\r\n             this.setState({ customerQuestDetailState: getAllRecords.data });\r\n\r\n             sessionStorage.setItem('customerQuestDetailState', responseData);\r\n\r\n             console.log(this.state.customerQuestDetailState);\r\n\r\n         }\r\n    }\r\n\r\n    //perform api call's\r\n    async endPointServicesCall(method, methodName, data, modal) {\r\n\r\n        try {\r\n\r\n            const responseResult = await serviceInfo.serviceCall(method, methodName, data);\r\n\r\n            if (responseResult.status === 200 || responseResult.status === 201 || responseResult.status === 202) {\r\n\r\n                //get all records\r\n                const getAllRecords = await serviceInfo.serviceCall(\"get\", `question`, null);\r\n\r\n                if (getAllRecords.status === 200 || getAllRecords.status === 201 || getAllRecords.status === 202) {\r\n\r\n                    const responseData = JSON.stringify(getAllRecords.data);\r\n\r\n                    this.setState({ customerQuestDetailState: getAllRecords.data });\r\n\r\n                    sessionStorage.setItem('customerQuestDetailState', responseData);\r\n\r\n                    this.toggleModal(modal);\r\n\r\n                    this.setState({ submit: \"Submit\" });\r\n\r\n                    console.log(this.state.customerQuestDetailState);\r\n\r\n                } else {\r\n                    this.setState({ showError: true });\r\n                }\r\n\r\n            } else {\r\n\r\n                this.setState({ showError: true });\r\n\r\n            }\r\n        } catch (e) {\r\n\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n    toggleModal = state => {\r\n        this.setState({\r\n            [state]: !this.state[state]\r\n        })\r\n    }\r\n    editQuestion(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"questionModal\")\r\n        this.setState({\r\n            question: row.question,\r\n            answer: row.answer,\r\n            id: row.id\r\n        })\r\n    }\r\n    handleChangeQuestion(e) {\r\n        const questionUpdated = e.target.value;\r\n\r\n        this.setState({ updatedQuestion: questionUpdated });\r\n    }\r\n    submitQuestion(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        console.log(this.state.updatedQuestion);\r\n        console.log(this.state.answer);\r\n        const details = {\r\n            \"id\": this.state.id,\r\n            \"text\": this.state.updatedQuestion,\r\n            \"answer\": this.state.answer\r\n        }\r\n        this.endPointServicesCall(\"put\", `question/${this.state.id}`, details, \"questionModal\")\r\n    }\r\n    editAnswer(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"answerModel\")\r\n        this.setState({\r\n            question: row.text,\r\n            answer: row.answer,\r\n            id: row.id\r\n        })\r\n    }\r\n    handleChangeAnswer(e) {\r\n        const answerUpdated = e.target.value;\r\n\r\n        this.setState({ updatedAnswer: answerUpdated });\r\n    }\r\n    submitAnswer(e) {\r\n        this.setState({ submit: \"loading...\" });\r\n        console.log(this.state.question);\r\n        console.log(this.state.updatedAnswer);\r\n\r\n        const details = {\r\n            \"id\": this.state.id,\r\n            \"text\": this.state.question,\r\n            \"answer\": this.state.updatedAnswer\r\n        }\r\n        this.endPointServicesCall(\"put\", `question/${this.state.id}`, details, \"answerModel\")\r\n    }\r\n    deleteQuest(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"deleteModel\")\r\n        this.setState({\r\n            question: row.question,\r\n            answer: row.answer,\r\n            id: row.id\r\n        })\r\n    }\r\n    submitDelete(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        const details = {\r\n            \"id\": this.state.id,\r\n            \"text\": this.state.question,\r\n            \"answer\": this.state.answerUpdated\r\n        }\r\n        this.endPointServicesCall(\"delete\", `question/${this.state.id}`, details, \"deleteModel\")\r\n    }\r\n    handleSubmit(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        e.preventDefault();\r\n        const data = new FormData(e.target);\r\n\r\n        const details = {\r\n            \"text\": data.get('question'),\r\n            \"answer\": data.get('answer'),\r\n        };\r\n\r\n        this.endPointServicesCall(\"post\", \"question\", details, \"insertModal\")\r\n    }\r\n\r\n    editTable = (cell, row) => {\r\n        return (\r\n            <UncontrolledDropdown group>\r\n                <DropdownToggle caret color=\"primary\">\r\n                    Update\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.editQuestion(e, row)} >\r\n                        Question\r\n                    </DropdownItem>\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.editAnswer(e, row)}>\r\n                        Answer\r\n                    </DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.deleteQuest(e, row)}>\r\n                        <span className=\"delete-txt\">\r\n                            Delete Quest\r\n                        </span>\r\n\r\n                    </DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Header />\r\n                    <div className=\"container containerDashBoard\">\r\n                        <div className=\"row cus-det\">\r\n                            <div className=\"col \">\r\n                                <h3>\r\n                                    Quest Details\r\n                                </h3>\r\n                            </div>\r\n                            <div className=\"col add-customer\">\r\n                                <button type=\"button\" className=\"btn btn-primary btn-sm add-customer\" onClick={() => this.toggleModal(\"insertModal\")}>Add Quest +</button>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <ToolkitProvider\r\n                            data={this.state.customerQuestDetailState}\r\n                            keyField=\"id\"\r\n                            columns={[\r\n                                {\r\n                                    dataField: \"id\",\r\n                                    text: \"id\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"text\",\r\n                                    text: \"Question\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"answer\",\r\n                                    text: \"Answer\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"Edit\",\r\n                                    text: \"Action\",\r\n                                    formatter: this.editTable,\r\n                                    sort: true,\r\n                                    editable: true\r\n                                }\r\n                            ]}\r\n\r\n                        >\r\n                            {props => (\r\n                                <div className=\"py-4\">\r\n                                    <BootstrapTable\r\n                                        {...props.baseProps}\r\n                                        bootstrap4={true}\r\n                                        bordered={false}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </ToolkitProvider>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.questionModal}\r\n                            toggle={() => this.toggleModal(\"questionModal\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Update Question\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"questionModal\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder={this.state.question} name=\"name\" onChange={this.handleChangeQuestion} />\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"primary\" type=\"button\" onClick={e => this.submitQuestion(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.answerModel}\r\n                            toggle={() => this.toggleModal(\"answerModel\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Update Answer\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"answerModel\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder={this.state.answer} name=\"name\" onChange={this.handleChangeAnswer} />\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"primary\" type=\"button\" onClick={e => this.submitAnswer(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.deleteModel}\r\n                            toggle={() => this.toggleModal(\"deleteModel\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Delete Customer ?\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"deleteModel\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                Are you sure to delete \r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"danger\" type=\"button\" onClick={e => this.submitDelete(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.insertModal}\r\n                            toggle={() => this.toggleModal(\"insertModal\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Create Quest\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"QuestionModal\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <form onSubmit={e => this.handleSubmit(e)}>\r\n                                    <label>\r\n                                        Question:\r\n                                    </label>\r\n                                    <input type=\"textarea\" className=\"form-control\" placeholder=\"Question\" name=\"question\" />\r\n                                    <br />\r\n                                    <label>\r\n                                        Answer:\r\n                                    </label>\r\n                                    <input type=\"textarea\" className=\"form-control\" placeholder=\"Answer\" name=\"answer\" />\r\n                                    <br />\r\n                                    <div className=\"modal-footer\">\r\n                                        <Button color=\"primary\">\r\n                                            {this.state.submit}\r\n                                        </Button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import React from 'react';\nimport \"../Css/app.css\";\nimport DashBoard from './dashBoard';\n\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <>\n        <DashBoard />\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport RoutesNavigation from './routes';\n\nconst routes = RoutesNavigation();\n\nReactDOM.render(\n  <React.StrictMode>\n    {routes}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport App from './Views/app';\r\n\r\nconst RoutesNavigation = () =>{\r\n    return(\r\n        <Router>\r\n        <Switch>\r\n            <Route component={App}></Route>\r\n        </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RoutesNavigation;"],"sourceRoot":""}