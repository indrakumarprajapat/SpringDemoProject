[{"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/index.js":"1","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/serviceWorker.js":"2","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/routes.js":"3","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Views/app.js":"4","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Views/dashBoard.js":"5","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Controller/servicesProvider.js":"6","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Component/header.js":"7"},{"size":603,"mtime":1632583518000,"results":"8","hashOfConfig":"9"},{"size":5086,"mtime":1632583518000,"results":"10","hashOfConfig":"9"},{"size":347,"mtime":1632644180000,"results":"11","hashOfConfig":"9"},{"size":228,"mtime":1632736174000,"results":"12","hashOfConfig":"9"},{"size":16199,"mtime":1633283292000,"results":"13","hashOfConfig":"9"},{"size":568,"mtime":1633282986000,"results":"14","hashOfConfig":"9"},{"size":377,"mtime":1632651254000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1vpnw98",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/index.js",[],["32","33"],"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/serviceWorker.js",[],"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/routes.js",[],"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Views/app.js",["34"],"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Views/dashBoard.js",["35"],"import React from 'react';\r\nimport ServiceProvider from '../Controller/servicesProvider';\r\nimport '../Css/dashBoard.css'\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport \"../Css/dashBoard.css\";\r\nimport {\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    Modal,\r\n    Button\r\n} from 'reactstrap';\r\nimport Header from '../Component/header';\r\n\r\n\r\nclass DashBoard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            customerQuestDetailState: [],\r\n            question: null,\r\n            answer: null,\r\n            id: null,\r\n            updatedQuestion: null,\r\n            updatedAnswer: null,\r\n            defaultModal: false,\r\n            submit: \"Submit\"\r\n        }\r\n        this.handleChangeQuestion = this.handleChangeQuestion.bind(this);\r\n        this.handleChangeAnswer = this.handleChangeAnswer.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n    componentDidMount(){\r\n        const getSessionDetails = sessionStorage.getItem('customerQuestDetailState');\r\n\r\n        const questDetails = JSON.parse(getSessionDetails);\r\n\r\n        this.setState({ customerQuestDetailState: questDetails});\r\n    }\r\n\r\n    async endPointServicesCall(method, methodName, data, modal) {\r\n\r\n        try {\r\n\r\n            const serviceInfo = new ServiceProvider();\r\n\r\n            const responseResult = await serviceInfo.serviceCall(method, methodName, data);\r\n\r\n            if (responseResult.status == 200) {\r\n\r\n                const responseData = JSON.stringify(responseResult.data);\r\n\r\n                this.setState({ customerQuestDetailState: responseResult.data });\r\n\r\n                sessionStorage.setItem('customerQuestDetailState', responseData);\r\n\r\n                this.toggleModal(modal);\r\n\r\n                this.setState({ submit: \"Submit\" });\r\n\r\n                console.log(this.state.customerQuestDetailState);\r\n\r\n            } else {\r\n\r\n                this.setState({ showError: true });\r\n\r\n            }\r\n        } catch (e) {\r\n\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n    toggleModal = state => {\r\n        this.setState({\r\n            [state]: !this.state[state]\r\n        })\r\n    }\r\n    editQuestion(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"questionModal\")\r\n        this.setState({\r\n            question: row.question,\r\n            answer: row.answer,\r\n            id: row.userId\r\n        })\r\n    }\r\n    handleChangeQuestion(e) {\r\n        const questionUpdated = e.target.value;\r\n\r\n        this.setState({ updatedQuestion: questionUpdated });\r\n    }\r\n    submitQuestion(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        const details = {\r\n            \"question\": this.state.updatedQuestion,\r\n            \"answer\": this.state.answer\r\n        }\r\n        this.endPointServicesCall(\"put\", `capi/update/${this.state.id}`, details, \"questionModal\")\r\n    }\r\n    editAnswer(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"answerModel\")\r\n        this.setState({\r\n            question: row.question,\r\n            answer: row.answer,\r\n            id: row.userId\r\n        })\r\n    }\r\n    handleChangeAnswer(e) {\r\n        const answerUpdated = e.target.value;\r\n\r\n        this.setState({ updatedAnswer: answerUpdated });\r\n    }\r\n    submitAnswer(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        const details = {\r\n            \"question\": this.state.question,\r\n            \"answer\": this.state.updatedAnswer\r\n        }\r\n        this.endPointServicesCall(\"put\", `capi/update/${this.state.id}`, details, \"answerModel\")\r\n    }\r\n    deleteQuest(e, row) {\r\n        e.preventDefault();\r\n        this.toggleModal(\"deleteModel\")\r\n        this.setState({\r\n            question: row.question,\r\n            answer: row.answer,\r\n            id: row.userId\r\n        })\r\n    }\r\n    submitDelete(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        const details = {\r\n            \"question\": this.state.question,\r\n            \"answer\": this.state.answerUpdated\r\n        }\r\n        this.endPointServicesCall(\"delete\", `capi/delete/${this.state.id}`, details, \"deleteModel\")\r\n    }\r\n    handleSubmit(e) {\r\n        this.setState({ submit: \"loading...\" })\r\n        e.preventDefault();\r\n        const data = new FormData(e.target);\r\n\r\n        const details = {\r\n            \"question\": data.get('question'),\r\n            \"answer\": data.get('answer'),\r\n        };\r\n\r\n        this.endPointServicesCall(\"post\", \"capi\", details, \"insertModal\")\r\n    }\r\n\r\n    editTable = (cell, row) => {\r\n        return (\r\n            <UncontrolledDropdown group>\r\n                <DropdownToggle caret color=\"primary\">\r\n                    Update\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.editQuestion(e, row)} >\r\n                        Question\r\n                    </DropdownItem>\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.editAnswer(e, row)}>\r\n                        Answer\r\n                    </DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem href=\"#pablo\" onClick={e => this.deleteQuest(e, row)}>\r\n                        <span className=\"delete-txt\">\r\n                            Delete Quest\r\n                        </span>\r\n\r\n                    </DropdownItem>\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Header />\r\n                    <div className=\"container containerDashBoard\">\r\n                        <div className=\"row cus-det\">\r\n                            <div className=\"col \">\r\n                                <h3>\r\n                                    Quest Details\r\n                                </h3>\r\n                            </div>\r\n                            <div className=\"col add-customer\">\r\n                                <button type=\"button\" class=\"btn btn-primary btn-sm add-customer\" onClick={() => this.toggleModal(\"insertModal\")}>Add Quest +</button>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <ToolkitProvider\r\n                            data={this.state.customerQuestDetailState}\r\n                            keyField=\"userId\"\r\n                            columns={[\r\n                                {\r\n                                    dataField: \"userId\",\r\n                                    text: \"userId\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"question\",\r\n                                    text: \"Question\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"answer\",\r\n                                    text: \"Answer\",\r\n                                    sort: true\r\n                                },\r\n                                {\r\n                                    dataField: \"Edit\",\r\n                                    text: \"Action\",\r\n                                    formatter: this.editTable,\r\n                                    sort: true,\r\n                                    editable: true\r\n                                }\r\n                            ]}\r\n\r\n                        >\r\n                            {props => (\r\n                                <div className=\"py-4\">\r\n                                    <BootstrapTable\r\n                                        {...props.baseProps}\r\n                                        bootstrap4={true}\r\n                                        bordered={false}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </ToolkitProvider>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.questionModal}\r\n                            toggle={() => this.toggleModal(\"questionModal\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Update Question\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"questionModal\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder={this.state.question} name=\"name\" onChange={this.handleChangeQuestion} />\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"primary\" type=\"button\" onClick={e => this.submitQuestion(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.answerModel}\r\n                            toggle={() => this.toggleModal(\"answerModel\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Update Answer\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"answerModel\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder={this.state.email} name=\"name\" onChange={this.handleChangeAnswer} />\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"primary\" type=\"button\" onClick={e => this.submitAnswer(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.deleteModel}\r\n                            toggle={() => this.toggleModal(\"deleteModel\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Delete Customer ?\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"deleteModel\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                Are you sure to delete {this.state.name}\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <Button color=\"danger\" type=\"button\" onClick={e => this.submitDelete(e)}>\r\n                                    {this.state.submit}\r\n                                </Button>\r\n                            </div>\r\n                        </Modal>\r\n                        <Modal\r\n                            className=\"modal-dialog-centered\"\r\n                            isOpen={this.state.insertModal}\r\n                            toggle={() => this.toggleModal(\"insertModal\")}\r\n                        >\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">\r\n                                    Create Quest\r\n                                </h5>\r\n                                <button\r\n                                    aria-label=\"Close\"\r\n                                    className=\"close\"\r\n                                    data-dismiss=\"modal\"\r\n                                    type=\"button\"\r\n                                    onClick={() => this.toggleModal(\"QuestionModal\")}\r\n                                >\r\n                                    <span aria-hidden={true}>×</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <form onSubmit={e => this.handleSubmit(e)}>\r\n                                    <label>\r\n                                        Question:\r\n                                    </label>\r\n                                    <input type=\"textarea\" className=\"form-control\" placeholder=\"Question\" name=\"question\" />\r\n                                    <br />\r\n                                    <label>\r\n                                        Answer:\r\n                                    </label>\r\n                                    <input type=\"textarea\" className=\"form-control\" placeholder=\"Answer\" name=\"answer\" />\r\n                                    <br />\r\n                                    <div className=\"modal-footer\">\r\n                                        <Button color=\"primary\">\r\n                                            {this.state.submit}\r\n                                        </Button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n\r\n                        </Modal>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DashBoard;","/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Controller/servicesProvider.js",[],"/Users/insessor/Github/SpringDemoProject/DemoReactJsApp/src/Component/header.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":53,"column":39,"nodeType":"46","messageId":"47","endLine":53,"endColumn":41},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'ServiceProvider' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]